# -*- mode: ruby -*-
# vi: set ft=ruby :

$sshKeyScript = <<SCRIPT
echo 'Copying ansible-vm public SSH Keys to the VM'
cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
chmod -R 700 /home/vagrant/.ssh
SCRIPT
$executeAnsible = <<SCRIPT
if [[ `hostname` == "control" ]]; then
  cd ansible
  for component in "loadbalancer.yml webserver.yml database.yml"; do
     ansible-playbook ${component}
  done
fi
SCRIPT


# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false
######################################################
  config.vbguest.auto_update = false

  config.vm.provision "file", source: "~/workspace/training/vagrant-resources/files/git-config", destination: "~/.gitconfig"

  config.vm.define "web1" do |web1|
    web1.vm.hostname = "app01"
    web1.vm.network "forwarded_port", guest: 81, host: 8081
    web1.vm.network "private_network", ip: "192.168.10.2"
  end

  config.vm.define "web2" do |web2|
    web2.vm.hostname = "app02"
    web2.vm.network "forwarded_port", guest: 82, host: 8082
    web2.vm.network "private_network", ip: "192.168.10.3"
  end

  config.vm.define "db" do |db|
    db.vm.hostname = "db01"
    db.vm.network "private_network", ip: "192.168.10.4"
  end

  config.vm.define "lb" do |lb|
    lb.vm.hostname = "lb01"
    lb.vm.network "private_network", ip: "192.168.10.5"
  end

  config.vm.define "controller" do |controller|
    controller.vm.hostname = "control"
    controller.vm.provision "file", source: "~/workspace/training/vagrant-resources/files/id_rsa", destination: "~/.ssh/id_rsa"
    controller.vm.provision "file", source: "~/workspace/training/vagrant-resources/ansible", destination: "~/ansible"
    controller.vm.network "private_network", ip: "192.168.10.6"
    controller.vm.provision "shell", path: "https://raw.githubusercontent.com/eac2000/training/master/vagrant-resources/scripts/ubuntu-controller.sh"
    #controller.vm.provision "shell", inline: $executeAnsible, privileged: false
    controller.vm.provision "shell", inline: "chmod -R 700 ~/.ssh", privileged: false
  end

  config.vm.provision "shell", path: "https://raw.githubusercontent.com/eac2000/training/master/vagrant-resources/scripts/ubuntu-common.sh"
  #==========================================================================
  # ssh key set-up
  config.vm.provision "file", source: "~/workspace/training/vagrant-resources/files/id_rsa.pub", destination: "~/.ssh/id_rsa.pub"
  config.vm.provision "shell", inline: $sshKeyScript, privileged: false
  config.vm.provision "shell", inline: "chmod -R 700 ~/.ssh", privileged: false
  #config.ssh.forward_agent = true
  #config.ssh.keys_only = false
  #config.ssh.password = "password"
  # Disables the vagrant generated key.
  # Uncomment if you only want access via user's key.
  #config.ssh.insert_key = false
  #==========================================================================


######################################################
  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  #config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
